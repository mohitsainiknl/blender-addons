{
    "description": "",
    "type": "SIMPLE",
    "pie": {
        "enabled": false,
        "icon": "",
        "space": "Any Space"
    },
    "done": false,
    "undo_file": [
        "",
        ""
    ],
    "variables": [
        {
            "id": "3246",
            "name": "Chain Name",
            "type": "String",
            "description": "",
            "disappear_if": "",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "subtype": "NONE",
                "default": "Chain",
                "maxlen": 0
            }
        },
        {
            "id": "1136",
            "name": "Control Count",
            "type": "Enum",
            "description": "",
            "disappear_if": "",
            "disable_if": "",
            "emboss": true,
            "expand": true,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "is_multiple": false,
                "is_dynamic": false,
                "items": "['1', '2', '3', 'More']",
                "file": null,
                "function": ""
            }
        },
        {
            "id": "3762",
            "name": "Blend Middle",
            "type": "Boolean",
            "description": "",
            "disappear_if": "tool.control_count != '3'",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "default": true
            }
        },
        {
            "id": "7875",
            "name": "Count",
            "type": "Integer",
            "description": "",
            "disappear_if": "tool.control_count != 'More'",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "subtype": "NONE",
                "default": 4,
                "use_min": true,
                "use_max": true,
                "use_soft_min": false,
                "use_soft_max": false,
                "min": 1,
                "max": 10,
                "soft_min": 0,
                "soft_max": 1
            }
        },
        {
            "id": "1413",
            "name": "Control",
            "type": "Enum",
            "description": "",
            "disappear_if": "tool.control_count != '1'",
            "disable_if": "",
            "emboss": true,
            "expand": true,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "is_multiple": false,
                "is_dynamic": false,
                "items": "['Leaf', 'Root']",
                "file": null,
                "function": ""
            }
        },
        {
            "id": "8303",
            "name": "Freeze",
            "type": "Enum",
            "description": "",
            "disappear_if": "",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "is_multiple": true,
                "is_dynamic": false,
                "items": "['Root', 'Leaf']",
                "file": null,
                "function": ""
            }
        },
        {
            "id": "5817",
            "name": "Control Prefix",
            "type": "String",
            "description": "",
            "disappear_if": "",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "subtype": "NONE",
                "default": "CTL_",
                "maxlen": 0
            }
        },
        {
            "id": "2385",
            "name": "Needle Prefix",
            "type": "String",
            "description": "",
            "disappear_if": "",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "subtype": "NONE",
                "default": "NDL_",
                "maxlen": 0
            }
        }
    ],
    "files": [
        [
            "ACC Code File 1.py",
            [
                "import math",
                "",
                "ctl_count = 1",
                "",
                "if tool.control_count == '1': pass",
                "elif tool.control_count == '2': ctl_count = 2",
                "elif tool.control_count == '3': ctl_count = 3",
                "elif tool.control_count == 'More': ctl_count = tool.count",
                "",
                "if bpy.context.mode == 'EDIT_ARMATURE':",
                "    if tool.needle_prefix != tool.control_prefix:",
                "        if len(bpy.context.selected_editable_bones) >= ctl_count:",
                "            pass",
                "        else:",
                "            self.report({'ERROR'}, message=f'Atleast Select `Control Count` Bones')",
                "            return",
                "    else:",
                "        self.report({'ERROR'}, message='Control and Needle Prefix Are Same')",
                "        return",
                "else:",
                "    self.report({'ERROR'}, message='Switch to Armature Edit Mode')",
                "    return",
                "",
                "",
                "",
                "##################### START #########################",
                "",
                "bpy.ops.ed.undo_push(message = f\"Restore Point (Tool : {tool_name})\")",
                "",
                "",
                "# UPR_CONTROL_NAME = 'Spine_Upper'",
                "# MID_CONTROL_NAME = 'Spine_Middle'",
                "# LOR_CONTROL_NAME = 'Spine_lower'",
                "",
                "selected_bones = bpy.context.selected_editable_bones",
                "target_bones = get_longest_chain(selected_bones)",
                "if len(target_bones) < len(selected_bones):",
                "    self.report({'ERROR'}, message='Selected Chain is Broken')",
                "    return",
                "",
                "target_count = len(target_bones)",
                "CHAIN_SIZE = sum([bone.length for bone in target_bones])",
                "AVG_SIZE = CHAIN_SIZE / target_count",
                "",
                "NEEDLE_SIZE = 0.5",
                "CONTROLER_SIZE = CHAIN_SIZE / (ctl_count + 1.8)",
                "",
                "is_freeze_first = ('Root' in tool.freeze)",
                "is_freeze_last = ('Leaf' in tool.freeze)",
                "",
                "armature = bpy.context.object.data",
                "armature_obj = bpy.context.object",
                "name_list = [bone.name.upper() for bone in armature.edit_bones]",
                "",
                "needle_bones = make_needles(target_bones, NEEDLE_SIZE, tool.needle_prefix)",
                "ctl_list = []",
                "for idx in range(ctl_count):",
                "    postfix = ''",
                "    if ctl_count == 1: pass",
                "    elif ctl_count == 2:",
                "        if idx == 0:",
                "            postfix = '_Lower'",
                "        elif idx == 1:",
                "            postfix = '_Upper'",
                "    elif ctl_count == 3:",
                "        if idx == 0:",
                "            postfix = '_Lower'",
                "        elif idx == 1:",
                "            postfix = '_Middle'",
                "        elif idx == 2:",
                "            postfix = '_Upper'",
                "    else:",
                "        postfix = f'_{(idx+1):02d}'",
                "",
                "    controler = armature.edit_bones.new(make_bone_name(tool.control_prefix, tool.chain_name + postfix, name_list))",
                "    controler.use_deform = False",
                "    controler.length = (AVG_SIZE * (1.1 + idx*0.18) if ctl_count <= 3 else CONTROLER_SIZE)",
                "    ctl_list.append(controler)",
                "",
                "ctl_ref = None",
                "if len(ctl_list) == 1 and not is_freeze_first:",
                "    ctl_ref = armature.edit_bones.new(make_bone_name('REF_', tool.chain_name, name_list))",
                "    ctl_ref.use_deform = False",
                "    ctl_ref.length = AVG_SIZE * 0.4",
                "    if needle_bones[0].parent is not None:",
                "        ctl_ref.use_connect = False",
                "        ctl_ref.parent = needle_bones[0].parent",
                "",
                "ctl_mid_needle = None",
                "if len(ctl_list) == 3:",
                "    control_middle = ctl_list[1]",
                "    postfix = '_Mid_Needle'",
                "    ctl_mid_needle = armature.edit_bones.new(make_bone_name(tool.control_prefix, tool.chain_name + postfix, name_list))",
                "    ctl_mid_needle.use_deform = False",
                "    ctl_mid_needle.length = AVG_SIZE * 0.6",
                "    ctl_mid_needle.matrix = control_middle.matrix",
                "",
                "    control_middle.use_connect = False",
                "    control_middle.parent = ctl_mid_needle",
                "",
                "ctl_root = None",
                "if ctl_count > 3:",
                "    postfix = '_Root'",
                "    ctl_root = armature.edit_bones.new(make_bone_name(tool.control_prefix, tool.chain_name + postfix, name_list))",
                "    ctl_root.use_deform = False",
                "    ctl_root.length = AVG_SIZE * 0.6",
                "    for controler in ctl_list:",
                "        controler.use_connect = False",
                "        controler.parent = ctl_root",
                "",
                "    if needle_bones[0].parent is not None:",
                "        ctl_root.use_connect = False",
                "        ctl_root.parent = needle_bones[0].parent",
                "",
                "",
                "first_bone = target_bones[0]",
                "(near_axis_idx, axis_side, _) = get_nearest_axis(first_bone.matrix.Identity(4), first_bone.matrix, 1)",
                "",
                "MOVE_WITH = 3",
                "if near_axis_idx == 0:",
                "    near_axis = 'X'",
                "    mov_values = (0, 0, MOVE_WITH)",
                "    rot_values = (0, 0, 90 * axis_side)",
                "elif near_axis_idx == 1:",
                "    near_axis = 'Y'",
                "    mov_values = (0, 0, MOVE_WITH)",
                "    if axis_side == 1:",
                "        rot_values = (0, 0, 0)",
                "    elif axis_side == 1:",
                "        rot_values = (0, 0, 180)",
                "elif near_axis_idx == 2:",
                "    near_axis = 'Z'",
                "    mov_values = (0, 0, -MOVE_WITH)",
                "    rot_values = (90 * axis_side, 0, 0)",
                "",
                "def get_index_fector(ctl_idx, ctl_count, bone_count, freeze_first, freeze_last):",
                "    if freeze_first:",
                "        bone_count -= 1",
                "    if freeze_last:",
                "        bone_count -= 1",
                "    pos = round(ctl_idx * bone_count / (ctl_count - 1), 3)",
                "",
                "    if math.ceil(pos) == int(pos):",
                "        idx = math.ceil(pos)",
                "        fec = 0",
                "    else:",
                "        idx = math.ceil(pos) - 1",
                "        fec = round(pos - idx, 3)",
                "    return (idx, fec)",
                "",
                "if ctl_count <= 3:",
                "    do_trans(ctl_list, [",
                "        (",
                "            'Move',",
                "            ('Local', first_bone, None)",
                "        ),",
                "        (",
                "            'Rotate',",
                "            ('Global', first_bone, rot_values)",
                "        ),",
                "    ])",
                "    if ctl_ref is not None:",
                "        do_trans(ctl_ref, [",
                "            (",
                "                'Move',",
                "                ('Local', first_bone, None)",
                "            ),",
                "            (",
                "                'Rotate',",
                "                ('local', first_bone, None)",
                "            ),",
                "            (",
                "                'Rotate.Align',",
                "                ('Global', first_bone, None)",
                "            ),",
                "        ])",
                "",
                "else:",
                "    for ctl_idx, ctl in enumerate(ctl_list):",
                "        tgt_last_idx = target_count - 1",
                "        ctl_last_idx = len(ctl_list) - 1",
                "        idx = 0",
                "        fec = 0",
                "        # print(is_freeze_first, is_freeze_last)",
                "        if ctl_idx == 0 and is_freeze_first:",
                "                idx = 1",
                "                fec = 0",
                "        elif ctl_idx == ctl_last_idx and is_freeze_last:",
                "                idx = -1",
                "                fec = 0",
                "        else:",
                "            (idx, fec) = get_index_fector(ctl_idx, ctl_count, target_count, is_freeze_first, is_freeze_last)",
                "            if is_freeze_first:",
                "                idx += 1",
                "        # print('idx :', idx, ', tgt :', target_count)",
                "        if idx != target_count:",
                "            bone = target_bones[idx]",
                "        else:",
                "            bone = target_bones[tgt_last_idx]",
                "            fec = 1",
                "        # print('idx :', idx, ', fec :', fec)",
                "        do_trans(ctl, [",
                "            (",
                "                'Rotate',",
                "                ('Local', bone, None)",
                "            ),",
                "            (",
                "                'Move',",
                "                ('Local', bone, (0, bone.length * fec, 0))",
                "            ),",
                "            (",
                "                'Rotate',",
                "                ('Global', bone, rot_values)",
                "            ),",
                "            (",
                "                f'Move-Loc{near_axis}',",
                "                ('Local', first_bone, mov_values)",
                "            ),",
                "        ])",
                "    ",
                "    mov_list = list(mov_values)",
                "    mov_list[1] = 0 # Move Root Back",
                "    mov_values = tuple(mov_list)",
                "    do_trans(ctl_root, [",
                "        (",
                "            'Rotate',",
                "            ('Global', first_bone, rot_values)",
                "        ),",
                "        (",
                "            'Move',",
                "            ('Local', first_bone, mov_values)",
                "        ),",
                "    ])",
                "",
                "ctl_root_name = None",
                "ctl_mid_needle_name = None",
                "ctl_ref_name = None",
                "if ctl_ref is not None:",
                "    ctl_ref_name = ctl_ref.name",
                "if ctl_root is not None:",
                "    ctl_root_name = ctl_root.name",
                "if ctl_mid_needle is not None:",
                "    ctl_mid_needle_name = ctl_mid_needle.name",
                "ctl_name_list = [ctl.name for ctl in ctl_list]",
                "needle_names = [bone.name for bone in needle_bones]",
                "",
                "",
                "bpy.ops.object.mode_set(mode='POSE')",
                "",
                "",
                "armature = bpy.context.object",
                "needle_bones = [armature.pose.bones[bone_name] for bone_name in needle_names]",
                "ctl_list = [armature.pose.bones[bone_name] for bone_name in ctl_name_list]",
                "if ctl_root_name is not None:",
                "    ctl_root = armature.pose.bones[ctl_root_name]",
                "if ctl_mid_needle_name is not None:",
                "    ctl_mid_needle = armature.pose.bones[ctl_mid_needle_name]",
                "if ctl_ref_name is not None:",
                "    ctl_ref = armature.pose.bones[ctl_ref_name]",
                "",
                "constraint_type = 'COPY_ROTATION'",
                "# constraint_type = 'COPY_TRANSFORMS'",
                "",
                "if ctl_mid_needle is not None and len(ctl_list) == 3:",
                "    const = ctl_mid_needle.constraints.new(constraint_type)",
                "    constraint_name = '_CTL_UPPER_'.join(constraint_type.split('_'))",
                "    const.name = constraint_name",
                "    const.target = armature",
                "    const.subtarget = ctl_list[2].name",
                "    const.influence = 1",
                "",
                "    const = ctl_mid_needle.constraints.new(constraint_type)",
                "    constraint_name = '_CTL_LOWER_'.join(constraint_type.split('_'))",
                "    const.name = constraint_name",
                "    const.target = armature",
                "    const.subtarget = ctl_list[0].name",
                "    const.influence = 0.5",
                "",
                "def get_influences(length_list, start_inf, end_inf, avg_and=1, prev_size=0):",
                "    count = len(length_list)",
                "    if count == 0:",
                "        return []",
                "    total = (sum(length_list) * (1 + (1 * avg_and)/count))",
                "    inf_list = []",
                "    ",
                "    dff_inf = end_inf - start_inf",
                "",
                "    for idx in range(count):",
                "        size = prev_size + length_list[idx]",
                "        inf = round(start_inf + ((size * dff_inf) / total), 5)",
                "        inf_list.append(inf)",
                "        prev_size = size",
                "    return inf_list",
                "",
                "def get_inf_list(length_list, control_bones, freeze_first, freeze_last, new_to_inf=None):",
                "    ctl_count = len(control_bones)",
                "    bone_count = len(length_list)",
                "",
                "    inf_list = []",
                "    prev_data = (0, 1, 0)",
                "",
                "    mid_inf = None",
                "    last_inf = None",
                "    pos_increment = 0",
                "    if freeze_first:",
                "        prev_data = (1, 1, 0)",
                "        pos_increment = 1",
                "        inf_list.append([(control_bones[0], 1)])",
                "    if freeze_last:",
                "        last_inf = [(control_bones[-1], 1)]",
                "    ",
                "    round_one = True",
                "    for ctl_idx_from, control in enumerate(control_bones):",
                "        if ctl_idx_from < len(control_bones)-1:",
                "            ctl_idx_to = ctl_idx_from + 1",
                "",
                "            ctl_from = control_bones[ctl_idx_from]",
                "            ctl_to = control_bones[ctl_idx_to]",
                "",
                "            (prev_pos, prev_inf, prev_fec) = prev_data",
                "            (pos, fec) = get_index_fector(ctl_idx_to, ctl_count, bone_count, freeze_first, freeze_last)",
                "            pos += pos_increment",
                "            avg_and = 1",
                "            prev_size = 0",
                "            if ctl_idx_to == len(control_bones)-1 and ((not freeze_last and pos == bone_count) or (freeze_last and pos == bone_count -1)):",
                "                to_inf = 0",
                "",
                "                if prev_fec == 0:",
                "                    avg_and = 0.5",
                "                    prev_size = -0.5",
                "",
                "            else:",
                "                to_inf = 0",
                "                if fec == 0:",
                "                    avg_and = 0.5",
                "                else:",
                "                    mid_inf = [(ctl_to, 1)]",
                "",
                "",
                "            sub_len_list = length_list[prev_pos : pos]",
                "",
                "            print('sub_len_list :', sub_len_list)",
                "            print('prev_inf :',prev_inf, ', to_inf :',to_inf, ', avg_and :',avg_and, ', prev_size :',prev_size,)",
                "            influences = get_influences(sub_len_list, prev_inf, to_inf, avg_and, prev_size)",
                "            print('influences :', influences)",
                "            inf_lst = 1 - influences[-1]",
                "            for inf in influences:",
                "                inf_list.append([(ctl_from, inf), (ctl_to, round(1 - inf, 5))])",
                "            ",
                "            if mid_inf is not None:",
                "                inf_list.append(mid_inf)",
                "",
                "            prev_data = ((pos + 1 if fec != 0 else pos), 1 - to_inf, fec)",
                "            mid_inf = None",
                "            avg_and = 1",
                "            prev_size = 0",
                "            round_one = False",
                "",
                "    if last_inf is not None:",
                "        inf_list.append(last_inf)",
                "    return inf_list",
                "",
                "",
                "len_list = [bone.length for bone in target_bones]",
                "if ctl_count == 1:",
                "    control = ctl_list[0]",
                "    if tool.control == 'Root':",
                "        from_inf = 1",
                "        to_inf = 0",
                "    else:",
                "        from_inf = 0",
                "        to_inf = 1",
                "",
                "    first_inf = None",
                "    last_inf = None",
                "    if is_freeze_first:",
                "        len_list.pop(0)",
                "        first_inf = from_inf",
                "    if is_freeze_last:",
                "        len_list.pop(-1)",
                "        last_inf = to_inf",
                "",
                "    influences = get_influences(len_list, from_inf, to_inf)",
                "",
                "    if first_inf is not None:",
                "        influences.insert(0, first_inf)",
                "    if last_inf is not None:",
                "        influences.insert(-1, last_inf)",
                "",
                "    for idx, inf in enumerate(influences):",
                "        needle = needle_bones[idx]",
                "",
                "        if not is_freeze_first:",
                "            const = needle.constraints.new(constraint_type)",
                "            constraint_name = f'_{ctl_ref.name}_'.join(constraint_type.split('_'))",
                "            const.name = constraint_name",
                "            const.target = armature",
                "            const.subtarget = ctl_ref.name",
                "            const.influence = 1",
                "",
                "        const = needle.constraints.new(constraint_type)",
                "        constraint_name = f'_{control.name}_'.join(constraint_type.split('_'))",
                "        const.name = constraint_name",
                "        const.target = armature",
                "        const.subtarget = control.name",
                "        const.influence = inf",
                "",
                "",
                "",
                "",
                "elif ctl_count > 1:",
                "",
                "    inf_tuple_list = get_inf_list(len_list, ctl_list, is_freeze_first, is_freeze_last)",
                "",
                "",
                "    for idx, tuple_list in enumerate(inf_tuple_list):",
                "        # print(idx, tuple_list)",
                "",
                "        if len(tuple_list) == 2:",
                "            (ctl1, inf1) = tuple_list[0]",
                "            (ctl2, inf2) = tuple_list[1]",
                "",
                "            tuple_list[0] = (ctl1, 1)",
                "",
                "        print(tuple_list)",
                "",
                "        needle = needle_bones[idx]",
                "        for inf_tuple in tuple_list:",
                "            (ctl_bone, inf) = inf_tuple",
                "",
                "            const = needle.constraints.new(constraint_type)",
                "            constraint_name = f'_{ctl_bone.name}_'.join(constraint_type.split('_'))",
                "            const.name = constraint_name",
                "            const.target = armature",
                "            const.subtarget = ctl_bone.name",
                "            const.influence = inf",
                "",
                "",
                ""
            ]
        ]
    ]
}