{
    "description": "",
    "type": "SIMPLE",
    "pie": {
        "enabled": false,
        "icon": "",
        "space": "Any Space"
    },
    "done": false,
    "undo_file": [
        "",
        ""
    ],
    "variables": [],
    "files": [
        [
            "B-in-P : File - 1",
            [
                "import bpy",
                "",
                "smaller_needle_first = True",
                "",
                "def add_needle(parent_bone, child_bone, needle_bone, connect_child, connect_needle):",
                "    if parent_bone is not None and child_bone is not None and needle_bone is not None:",
                "        child_bone.parent = needle_bone",
                "        child_bone.use_connect = connect_child",
                "        ",
                "        needle_bone.parent = parent_bone",
                "        needle_bone.use_connect = connect_needle",
                "",
                "def get_bone_tuple_list(bone_list):",
                "    def get_chain(bone, bones):",
                "        if bone.parent is not None and bone.parent in bones:",
                "            return [bone] + get_chain(bone.parent, bones)",
                "        else:",
                "            return [bone]",
                "",
                "    def get_longest_chain(bone_list):",
                "        longest_chain = []",
                "        for bone in bone_list:",
                "            chain = get_chain(bone, bone_list)",
                "            if len(chain) > len(longest_chain):",
                "                longest_chain = chain",
                "        return longest_chain",
                "    ",
                "    def get_tuple_list(bone_chain, bones):",
                "        tuple_list = [(bone, []) for bone in bone_chain]",
                "        def add_tuple_to_list(chain_bone, bone):",
                "            for bone_tuple in tuple_list:",
                "                (c_bone, needle_list) = bone_tuple",
                "                if c_bone == chain_bone:",
                "                    if len(needle_list) > 0:",
                "                        is_done = False",
                "                        for idx in range(len(needle_list)):",
                "                            bn = needle_list[idx]",
                "                            if bone.length > bn.length:",
                "                                needle_list.insert(idx, bone)",
                "                                is_done = True",
                "                                break",
                "                        if not is_done:",
                "                            needle_list.insert(idx+1, bone)",
                "                    else:",
                "                        needle_list.append(bone)",
                "                    break",
                "",
                "        for bone in bones:",
                "            nearest_bone = None",
                "            nearest_distance = 99 # max value",
                "            for c_bone in bone_chain:",
                "                distance = abs((c_bone.head - bone.head).length)",
                "                if distance < nearest_distance:",
                "                    nearest_distance = distance",
                "                    nearest_bone = c_bone",
                "            if nearest_bone is not None:",
                "                add_tuple_to_list(nearest_bone, bone)",
                "                # print(nearest_bone.name, bone.name, nearest_distance, use_connect)",
                "        return tuple_list",
                "",
                "",
                "    longest_chain = get_longest_chain(bone_list)",
                "    other_bones = [bone for bone in bone_list if bone not in longest_chain]",
                "    return get_tuple_list(longest_chain, other_bones)",
                "            ",
                "def connect(from_bone, to_bone):",
                "    use_connect = abs((from_bone.head - to_bone.tail).length) == 0",
                "    from_bone.use_connect = use_connect",
                "    from_bone.parent = to_bone",
                "",
                "if bpy.context.mode == 'EDIT_ARMATURE' and len(bpy.context.selected_editable_bones) > 0:",
                "    selected_bones = bpy.context.selected_editable_bones",
                "    bone_tuple_list = get_bone_tuple_list(selected_bones)",
                "    for bone_tuple in bone_tuple_list:",
                "        (c_bone, needle_list) = bone_tuple",
                "        needles = [bone.name for bone in needle_list]",
                "        print(c_bone.name, needles)",
                "    ",
                "    for idx in range(len(bone_tuple_list)):",
                "        (c_bone, needle_list) = bone_tuple_list[idx]",
                "        is_last_c_bone = (len(bone_tuple_list) == idx+1)",
                "        if len(needle_list) > 0:",
                "            longest_needle = needle_list[0]",
                "            connect(c_bone, longest_needle)",
                "",
                "            needles_len = len(needle_list)",
                "            for n_idx in range(needles_len):",
                "                needle = needle_list[n_idx]",
                "                is_last = (needles_len == n_idx+1)",
                "",
                "                if not is_last:",
                "                    next_needle = needle_list[n_idx + 1]",
                "                    connect(needle, next_needle)",
                "                elif not is_last_c_bone:",
                "                    next_c_bone = bone_tuple_list[idx + 1][0]",
                "                    connect(needle, next_c_bone)",
                "",
                "",
                "",
                "",
                ""
            ]
        ]
    ]
}