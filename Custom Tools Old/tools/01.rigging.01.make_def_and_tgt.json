{
    "description": "",
    "type": "SIMPLE",
    "pie": {
        "enabled": false,
        "icon": "",
        "space": "Any Space"
    },
    "done": false,
    "undo_file": [
        "M DEF : Undo File",
        [
            "def pre_checking():",
            "    if bpy.context.mode == 'EDIT_ARMATURE':",
            "        if tool.prefix_def != tool.prefix_tgt:",
            "            return True",
            "        else:",
            "            self.report({'ERROR'}, message='DEF and TGT Prefix Are Same')",
            "    else:",
            "        self.report({'ERROR'}, message='Switch to Armature Edit Mode')",
            "    return False",
            "",
            "is_okay = pre_checking()",
            "if is_okay:",
            "    bpy.ops.ed.undo_push(message = f\"Undo Restore (Tool : {tool_name})\")",
            "    armature = bpy.context.object.data",
            "    if tool.prefix_tgt == '':",
            "        for bone in reversed(bpy.context.selected_editable_bones):",
            "            armature.edit_bones.remove(bone)",
            "    ",
            "    bone_name_list = []",
            "    for bone in reversed(armature.edit_bones):",
            "        if tool.prefix_tgt != '' and bone.name.startswith(tool.prefix_tgt):",
            "            armature.edit_bones.remove(bone)",
            "",
            "        elif tool.prefix_def != '' and bone.name.startswith(tool.prefix_def):",
            "            bone.name = bone.name[(len(tool.prefix_def)):]",
            "            bone_name_list.append(bone.name)",
            "    ",
            "    if len(bone_name_list) > 0:",
            "        bpy.ops.object.mode_set(mode='POSE')",
            "        armature = bpy.context.object",
            "        pose_bones = armature.pose.bones",
            "        pbone_list = [pose_bones[b_name] for b_name in bone_name_list]",
            "",
            "        for pbone in pbone_list:",
            "            remove_list = ['COPY_TRANSFORMS','COPY_LOCATION','COPY_ROTATION','COPY_SCALE']",
            "            for cnst in reversed(pbone.constraints):",
            "                if cnst.type in remove_list and cnst.name.upper().find('TGT') >= 0:",
            "                    pbone.constraints.remove(cnst)",
            "",
            "        bpy.ops.object.mode_set(mode='EDIT')",
            "            ",
            "    self.report({'INFO'}, message='Undo Done')",
            "    refresh_view()",
            ""
        ]
    ],
    "variables": [
        {
            "id": "6560",
            "name": "Only Selected",
            "type": "Boolean",
            "description": "",
            "disappear_if": "",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "default": true
            }
        },
        {
            "id": "9826",
            "name": "Armature",
            "type": "Pointer",
            "description": "",
            "disappear_if": "tool.only_selected",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "datatype": "Armature"
            }
        },
        {
            "id": "4970",
            "name": "Prefix DEF",
            "type": "String",
            "description": "",
            "disappear_if": "",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "subtype": "NONE",
                "default": "DEF_",
                "maxlen": 0
            }
        },
        {
            "id": "5749",
            "name": "Prefix TGT",
            "type": "String",
            "description": "",
            "disappear_if": "",
            "disable_if": "",
            "emboss": true,
            "expand": false,
            "slider": false,
            "toggle": false,
            "separator": 0.0,
            "update_file": [
                "",
                ""
            ],
            "data": {
                "subtype": "NONE",
                "default": "TGT_",
                "maxlen": 0
            }
        }
    ],
    "files": [
        [
            "M DEF : File - 1",
            [
                "def pre_checking():",
                "    if bpy.context.mode == 'EDIT_ARMATURE':",
                "        if tool.prefix_def != tool.prefix_tgt:",
                "            return True",
                "        else:",
                "            self.report({'ERROR'}, message='DEF and TGT Prefix Are Same')",
                "    else:",
                "        self.report({'ERROR'}, message='Switch to Armature Edit Mode')",
                "    return False",
                "",
                "is_okay = pre_checking()",
                "if is_okay:",
                "    bpy.ops.ed.undo_push(message = \"Tool Restore (Tool : {tool_name})\")",
                "    def make_name(prefix, other_prefix, name):",
                "        if prefix != '':",
                "            found_inside = True",
                "            for idx in range(len(prefix)):",
                "                if name[idx].upper() != prefix[idx].upper():",
                "                    found_inside = False",
                "                    break",
                "        else:",
                "            found_inside = False",
                "        if not found_inside and other_prefix != '':",
                "            other_found_inside = True",
                "            for idx in range(len(other_prefix)):",
                "                if name[idx].upper() != other_prefix[idx].upper():",
                "                    other_found_inside = False",
                "                    break",
                "        if found_inside:",
                "            name = name[(idx+1):]",
                "        elif other_prefix != '' and other_found_inside:",
                "            name = name[(idx+1):]",
                "        return prefix + name",
                "",
                "    def add_pbone_constraints(bone_tuple_list):",
                "        bone_name_tuple_list = [(bone.name, new_bone.name) for (bone, new_bone) in bone_tuple_list]",
                "        bpy.ops.object.mode_set(mode='POSE')",
                "        armature = bpy.context.object",
                "        pose_bones = armature.pose.bones",
                "        pbone_tuple_list = [(pose_bones[b_name], pose_bones[nb_name]) for (b_name, nb_name) in bone_name_tuple_list]",
                "",
                "        for (pbone, new_pbone) in pbone_tuple_list:",
                "            remove_list = ['COPY_TRANSFORMS','COPY_LOCATION','COPY_ROTATION','COPY_SCALE']",
                "            for cnst in reversed(pbone.constraints):",
                "                if cnst.type in remove_list:",
                "                    pbone.constraints.remove(cnst)",
                "            cnst = pbone.constraints.new('COPY_TRANSFORMS')",
                "            cnst.name = 'Copy TGT Transformations'",
                "            cnst.target = armature",
                "            cnst.subtarget = new_pbone.name",
                "",
                "        bpy.ops.object.mode_set(mode='EDIT')",
                "",
                "    def use_bone_list(armature, bone_list):",
                "        if tool.prefix_def != '':",
                "            prefix = tool.prefix_def",
                "            other_prefix = tool.prefix_tgt",
                "            for bone in bone_list:",
                "                bone.name = make_name(prefix, other_prefix, bone.name)",
                "",
                "        prefix = tool.prefix_tgt",
                "        other_prefix = tool.prefix_def",
                "        bone_tuple_list = []",
                "        for bone in bone_list:",
                "            new_bone = armature.edit_bones.new(make_name(prefix, other_prefix, bone.name))   # <--- creating bone",
                "            new_bone.length = bone.length",
                "            new_bone.matrix = bone.matrix",
                "            new_bone.use_deform = False",
                "            bone.use_deform = True",
                "            bone_tuple_list.append((bone, new_bone))",
                "",
                "        for (bone, new_bone) in bone_tuple_list:   # <--- checking parent",
                "            if bone.parent is not None:",
                "                for (bone2, new_bone2) in bone_tuple_list:",
                "                    if bone.parent.name == bone2.name:",
                "                        new_bone.parent = new_bone2",
                "                        new_bone.use_connect = bone.use_connect",
                "                        new_bone.use_local_location = bone.use_local_location",
                "                        new_bone.use_inherit_rotation = bone.use_inherit_rotation",
                "                        new_bone.inherit_scale = bone.inherit_scale",
                "                        break",
                "",
                "        bpy.ops.armature.select_all(action='DESELECT')",
                "        for (bone, new_bone) in bone_tuple_list:",
                "            new_bone.select = True",
                "            new_bone.select_head = True",
                "            new_bone.select_tail = True",
                "",
                "        add_pbone_constraints(bone_tuple_list)",
                "        ",
                "        ",
                "",
                "",
                "    if tool.only_selected:",
                "        bone_list = bpy.context.selected_editable_bones",
                "        if len(bone_list) > 0:",
                "            bone_name_list = [bone.name for bone in bone_list]",
                "            unselected_bone_name_list = [bone.name for bone in bpy.context.object.data.edit_bones if bone.name not in bone_name_list]",
                "            if len(unselected_bone_name_list) > 0:",
                "                if tool.prefix_def != '':",
                "                    prefix = tool.prefix_def",
                "                    other_prefix = tool.prefix_tgt",
                "                    def_name_list = [make_name(prefix, other_prefix, bone_name) for bone_name in bone_name_list]",
                "                if tool.prefix_tgt != '':",
                "                    prefix = tool.prefix_tgt",
                "                    other_prefix = tool.prefix_def",
                "                    tgt_name_list = [make_name(prefix, other_prefix, bone_name) for bone_name in bone_name_list]",
                "                ",
                "                new_bone_name_list = (def_name_list if def_name_list is not None else []) + (tgt_name_list if tgt_name_list is not None else [])",
                "                ",
                "                bone_exists_list = [bone.name for bone in bpy.context.object.data.edit_bones if bone.name in new_bone_name_list]",
                "                if len(bone_exists_list) > 0:",
                "                    print('Bone Exists : ', bone_exists_list)",
                "                    self.report({'ERROR'}, message='Bone Already Exists')",
                "                    return",
                "            ",
                "            use_bone_list(bpy.context.object.data, bone_list)",
                "        else:",
                "            self.report({'ERROR'}, message='No Bone Selected')",
                "    else:",
                "        if tool.armature is not None:",
                "            bone_list = tool.armature.edit_bones",
                "            use_bone_list(tool.armature, bone_list)",
                "        else:",
                "            self.report({'ERROR'}, message='Select Armature')",
                "",
                "",
                "",
                "    "
            ]
        ]
    ]
}